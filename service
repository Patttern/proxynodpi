#!/bin/bash

ENVFILE=.proxynodpi.env
echo -e "PACKAGES=SERVICE_NAME=proxynodpi\nSYSTEMD_SERVICE_NAME=proxynodpi.service\nSYSTEMD_DIR=/etc/systemd/system\nPYTHON_TARGET=python3\nRUNNER=proxy_runner.py\nVENV_DIR=venv\nLOGS_DIR=logs\nPIDS_DIR=pids\nREPO=Patttern/proxynodpi" > $ENVFILE
source $ENVFILE

function setup {
  echo 'Производится настройка программы'

  # Stop program or service
  stop

  # Deinstall if installed as systemd service
  deinstall

  # Setup programm
  currPath=`pwd`
  if [ -d "$currPath/${VENV_DIR}" ]; then
   rm -rf $currPath/${VENV_DIR}
  fi
  mkdir -p $currPath/$LOGS_DIR
  mkdir -p $currPath/$PIDS_DIR
  exec=`which $PYTHON_TARGET`
  $exec -m venv $currPath/$VENV_DIR
  source $currPath/${VENV_DIR}/bin/activate
  python -m pip install --upgrade pip
  pip install --upgrade -r requirements.txt
  deactivate

  # Check if installed
  echo
  if [ ! -f $currPath/${VENV_DIR}/bin/$PYTHON_TARGET ]; then
    echo 'Настройка программы не завершена. Исправьте ошибки и повторите настройку программы.'
  else
    echo 'Настройка программы успешно завершена'
  fi
  echo
}

function deinstallsysd {
  sudo systemctl stop $SYSTEMD_SERVICE_NAME
  sudo systemctl disable $SYSTEMD_SERVICE_NAME
  sudo rm $SYSTEMD_DIR/$SYSTEMD_SERVICE_NAME
}

function installsysd {
  echo 'Производится установка сервиса'
  deinstallsysd
  currPath=`pwd`
  cp $currPath/systemd/$SYSTEMD_SERVICE_NAME.sample $currPath/systemd/$SYSTEMD_SERVICE_NAME
  sed -i "s/__user__/$USER/g" $currPath/systemd/$SYSTEMD_SERVICE_NAME
  sed -i "s+__path__+$currPath+g" $currPath/systemd/$SYSTEMD_SERVICE_NAME
  sed -i "s/__runner__/$RUNNER/g" $currPath/systemd/$SYSTEMD_SERVICE_NAME
  sudo mv $currPath/systemd/$SYSTEMD_SERVICE_NAME $SYSTEMD_DIR/$SYSTEMD_SERVICE_NAME
  sudo systemctl enable $SYSTEMD_SERVICE_NAME
  sudo systemctl start $SYSTEMD_SERVICE_NAME
  systemctl status $SYSTEMD_SERVICE_NAME
  echo 'Установка успешно завершена'
}

function install {
  # Resetup program
  currPath=`pwd`
  if [ ! -f $currPath/${VENV_DIR}/bin/$PYTHON_TARGET ]; then
    setup
  fi

  # Install systemd service
  installed=false
  systemctl list-unit-files $SYSTEMD_SERVICE_NAME &>/dev/null && installed=true
  echo
  if [ $installed = true ]; then
    echo 'Программа уже установлена как сервис.'
    read -p "Желаете переустановить сервис? (Y/N): " confirm && [[ $confirm == [yY] || $confirm == [yY][eE][sS] ]] && installsysd || exit 0
  else
    read -p "Желаете установить программу как сервис? (Y/N): " confirm && [[ $confirm == [yY] || $confirm == [yY][eE][sS] ]] && installsysd || exit 0
  fi
}

function deinstall {
  installed=true
  systemctl list-unit-files $SYSTEMD_SERVICE_NAME &>/dev/null && installed=true || installed=false
  if [ $installed = true ]; then
    echo 'Производится удаление сервиса'
    deinstallsysd
    echo 'Удаление успешно завершено'
  else
    echo 'Программа не установлена как сервис'
  fi
  echo
}

function start {
  alreadyRunned='Программа уже запущена'
  installed=true
  systemctl list-unit-files $SYSTEMD_SERVICE_NAME &>/dev/null && installed=true || installed=false
  pid=`ps ax | grep python | grep $RUNNER | awk '{print $1}'`
  if [ $installed = true ]; then
    if [ -z "$pid" ]; then
      sudo systemctl start $SYSTEMD_SERVICE_NAME
    else
      echo $alreadyRunned
      systemctl status $SYSTEMD_SERVICE_NAME
    fi
  else
    if [ -z "$pid" ]; then
      currPath=`pwd`
      source venv/bin/activate
      nohup python $RUNNER >/dev/null 2>&1 & echo $! > $currPath/${PIDS_DIR}/${SERVICE_NAME}.pid
    else
      echo $alreadyRunned
    fi
  fi
}

function stop {
  installed=true
  systemctl list-unit-files $SYSTEMD_SERVICE_NAME &>/dev/null && installed=true || installed=false
  if [ $installed = true ]; then
    sudo systemctl stop $SYSTEMD_SERVICE_NAME
  else
    currPath=`pwd`
    if [ -f "$currPath/${PIDS_DIR}/${SERVICE_NAME}.pid" ]; then
      pid=`cat $currPath/${PIDS_DIR}/${SERVICE_NAME}.pid`
      rm $currPath/${PIDS_DIR}/${SERVICE_NAME}.pid
    else
      pid=`ps ax | grep python | grep $RUNNER | awk '{print $1}'`
    fi
    if [ ! -z "$pid" ]; then
      sudo kill -9 $pid
    fi
  fi
}

function restart {
  stop
  start
}

function update {
  version
  release=$(curl --silent -m 10 --connect-timeout 5 "https://api.github.com/repos/$REPO/releases/latest")
  tag=$(echo "$release" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
  description=$(echo "$release" | grep '"body":' | sed -E 's/.*"([^"]+)".*/\1/')
  exec=`which $PYTHON_TARGET`
  currVersion=`$exec -c "print(__import__('proxyserver').__version__)"`
  if [ "$tag" = "v$currVersion" ]; then
    echo 'Установлена актуальная версия программы'
  else
    echo "Доступна новая версия программы: $tag"
    echo "Описание:"
    echo -e $description | sed 's/\\r\\n/\n/g'
    echo
    read -p "Желаете загрузить новую версию? (Y/N): " confirm && [[ $confirm == [yY] || $confirm == [yY][eE][sS] ]] && release || exit 0
  fi
}

function release {
  target=$(echo "$release" | grep '"tarball_url":' | sed -E 's/.*"([^"]+)".*/\1/')
  outfile=${SERVICE_NAME}_${tag}.tar.gz
  wget -q -O $outfile $target
  tar zxvf $outfile --strip-components 1
  rm $outfile
  ./$(basename $0) setup && ./$(basename $0) install && exit
}

function version {
  exec=`which $PYTHON_TARGET`
  currVersion=`$exec -c "print(__import__('proxyserver').__version__)"`
  currDate=`$exec -c "print(__import__('proxyserver').__updated__)"`
  echo "Proxy NoDPI v${currVersion} (${currDate})"
  echo
}

function help {
  version
  echo 'Основные команды:'
  echo '  setup - начальная настройка программы.'
  echo '  install - установить программу как systemd сервис'
  echo '  deinstall - удалить программу из systemd сервиса'
  echo '  start - запуск программы/сервиса'
  echo '  stop - остановка программы/сервиса'
  echo '  restart - перезапуск программы/сервиса'
  echo '  update - обновить программу до актуальной версии'
  echo '  version - показать текущую версию программы'
  echo '  help - текущая справка'
  echo
}

case $1 in
  setup)
    setup
    ;;
  install)
    install
    ;;
  deinstall)
    deinstall
    ;;
  start)
    start
    ;;
  stop)
    stop
    ;;
  restart)
    restart
    ;;
  update)
    update
    ;;
  version)
    version
    ;;
  help)
    help
    ;;
  *)
    help
    ;;
esac

exit 0
